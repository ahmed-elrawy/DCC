// <auto-generated />
using System;
using DCC.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DCC.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("DCC.API.Model.BodyAreas", b =>
                {
                    b.Property<int>("BodyAreasId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameArea");

                    b.HasKey("BodyAreasId");

                    b.ToTable("BodyAreas");
                });

            modelBuilder.Entity("DCC.API.Model.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DrugName");

                    b.Property<int>("DrugTypeId");

                    b.Property<int>("TreatmentBulletinId");

                    b.HasKey("DrugId");

                    b.HasIndex("DrugTypeId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("DCC.API.Model.DrugSymptom", b =>
                {
                    b.Property<int>("DrugId");

                    b.Property<int>("SymptomId");

                    b.HasKey("DrugId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("DrugSymptom");
                });

            modelBuilder.Entity("DCC.API.Model.DrugType", b =>
                {
                    b.Property<int>("DrugTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DrugTypeName");

                    b.HasKey("DrugTypeId");

                    b.ToTable("DrugTyps");
                });

            modelBuilder.Entity("DCC.API.Model.Like", b =>
                {
                    b.Property<string>("LikerId");

                    b.Property<string>("LikeeId");

                    b.HasKey("LikerId", "LikeeId");

                    b.HasIndex("LikeeId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DCC.API.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateRead");

                    b.Property<DateTime>("MessageSent");

                    b.Property<bool>("RecipientDeleted");

                    b.Property<string>("RecipientId");

                    b.Property<bool>("SenderDeleted");

                    b.Property<string>("SenderId");

                    b.Property<bool>("isRead");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DCC.API.Model.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Descraption");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DCC.API.Model.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BodyAreasId");

                    b.Property<int>("DrugId");

                    b.Property<int>("SymptomId");

                    b.Property<DateTime>("TimeCreated");

                    b.Property<string>("UserId");

                    b.HasKey("RequestId");

                    b.HasIndex("BodyAreasId");

                    b.HasIndex("DrugId");

                    b.HasIndex("SymptomId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DCC.API.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DCC.API.Model.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BodyAreasId");

                    b.Property<string>("SymptomName");

                    b.HasKey("SymptomId");

                    b.HasIndex("BodyAreasId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("DCC.API.Model.TreatmentBulletin", b =>
                {
                    b.Property<int>("TreatmentBulletinId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Composition");

                    b.Property<string>("Dosing");

                    b.Property<int>("DrugId");

                    b.Property<string>("Indications");

                    b.Property<string>("SideEffects");

                    b.HasKey("TreatmentBulletinId");

                    b.HasIndex("DrugId")
                        .IsUnique();

                    b.ToTable("TreatmentBulletins");
                });

            modelBuilder.Entity("DCC.API.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Gender");

                    b.Property<string>("Interests");

                    b.Property<string>("Introducation");

                    b.Property<string>("KnownAs");

                    b.Property<DateTime>("LastActive");

                    b.Property<int>("LikerCount");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("LookingFor");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Specialization");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("TypeOfUser");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DCC.API.Model.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DCC.API.Model.Drug", b =>
                {
                    b.HasOne("DCC.API.Model.DrugType", "DrugType")
                        .WithMany("Drug")
                        .HasForeignKey("DrugTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DCC.API.Model.DrugSymptom", b =>
                {
                    b.HasOne("DCC.API.Model.Drug", "Drug")
                        .WithMany("DrugSymptom")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DCC.API.Model.Symptom", "Symptom")
                        .WithMany("DrugSymptom")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DCC.API.Model.Like", b =>
                {
                    b.HasOne("DCC.API.Model.User", "Likee")
                        .WithMany("Likers")
                        .HasForeignKey("LikeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DCC.API.Model.User", "Liker")
                        .WithMany("Likees")
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DCC.API.Model.Message", b =>
                {
                    b.HasOne("DCC.API.Model.User", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DCC.API.Model.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DCC.API.Model.Photo", b =>
                {
                    b.HasOne("DCC.API.Model.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DCC.API.Model.Request", b =>
                {
                    b.HasOne("DCC.API.Model.BodyAreas", "BodyAreas")
                        .WithMany()
                        .HasForeignKey("BodyAreasId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DCC.API.Model.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DCC.API.Model.Symptom", "Symptom")
                        .WithMany()
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DCC.API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DCC.API.Model.Symptom", b =>
                {
                    b.HasOne("DCC.API.Model.BodyAreas", "BodyAreas")
                        .WithMany("Symptoms")
                        .HasForeignKey("BodyAreasId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DCC.API.Model.TreatmentBulletin", b =>
                {
                    b.HasOne("DCC.API.Model.Drug", "Drug")
                        .WithOne("TreatmentBulletin")
                        .HasForeignKey("DCC.API.Model.TreatmentBulletin", "DrugId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DCC.API.Model.UserRole", b =>
                {
                    b.HasOne("DCC.API.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DCC.API.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DCC.API.Model.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DCC.API.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DCC.API.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DCC.API.Model.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
